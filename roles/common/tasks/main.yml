---

- name: Enable SELinux
  ansible.posix.selinux: policy=targeted state=enforcing
  tags: common

- name: Set hostname
  ansible.builtin.hostname: name="{{ inventory_hostname }}"
  tags: common

- name: set timezone to europe/stockholm
  copy: src=/usr/share/zoneinfo/Europe/Stockholm dest=/etc/localtime
  tags: common

- name: configure locale properly to avoid nag on ssh login
  lineinfile:
    path: /etc/environment
    create: yes
    mode: 0644
    line: "{{ item }}"
  with_items:
    - LC_ALL=en_US.UTF-8
    - LC_CTYPE=en_US.UTF-8
  when: ansible_distribution == 'CentOS'
  tags: common

- name: apply sysctl tweaks
  when: ansible_distribution == 'CentOS'
  block:
    - name: template sysctl tweaks (elastic and friends)
      template: src=tweaks.conf.j2 dest=/etc/sysctl.d/tweaks.conf
      register: sysctld_tweaks
      tags: common
    - name: apply sysctl config if changed
      shell: sysctl --system
      when: sysctld_tweaks is changed
      tags: common
  tags: common

- name: install ntp
  yum: name=ntp state=present
  when: ansible_distribution == 'CentOS'
  tags: common

- name: ntpd running and enabled
  service: name=ntpd state=started enabled=yes
  when: ansible_distribution == 'CentOS'
  tags: common

- name: Install firewalld
  ansible.builtin.yum: name=firewalld state=present
  tags: common

- name: Firewalld running and enabled
  ansible.builtin.service: name=firewalld state=started enabled=yes
  tags: common

- name: Install wget, unzip, emacs, mlocate and such
  ansible.builtin.yum:
    name: [ 'wget', 'zip', 'unzip', 'emacs', 'mlocate', 'bind-utils', 'pigz', 'man-pages',
            'yum-plugin-versionlock', 'lsof', 'iotop', 'rsync', 'tcpdump', 'sysstat', 'tmux',
            'system-storage-manager', 'traceroute', 'bzip2', 'telnet', 'tree', 'createrepo' ]
    state: present
  tags: common

- name: install centos packages policycoreutils-python and lynx
  yum:
    name: [ 'policycoreutils-python', 'lynx' ]
    state: present
  when: ansible_distribution == 'CentOS'
  tags: common

- name: disable emacs backup files by default
  lineinfile:
    line: (setq make-backup-files nil)
    path: /usr/share/emacs/site-lisp/default.el
    state: present
  tags: common

- name: ius repo
  yum_repository:
    name: ius
    description: IUS for Enterprise Linux {{ ansible_distribution_major_version }} - $basearch
    baseurl: https://repo.ius.io/{{ ansible_distribution_major_version }}/$basearch/
    gpgkey: https://repo.ius.io/RPM-GPG-KEY-IUS-7
    enabled: no
  when: ansible_distribution == 'CentOS'
  tags: common

- name: Install Git from AppStream
  ansible.builtin.yum: name=git-all state=present
  when: ansible_distribution == 'AlmaLinux'
  tags: common

- name: install ius git236
  when: ansible_distribution == 'CentOS'
  block:
    - name: install ius git236 (2.x)
      yum: name=git236 enablerepo=ius state=present
      ignore_errors: yes
      register: install_ius_git236
      tags: common
    - name: uninstall git (1.8)
      yum: name=git state=absent
      when: install_ius_git236 is failed
      tags: common
    - name: install ius git236 (2.x)
      yum: name=git236 enablerepo=ius state=present
      when: install_ius_git236 is failed
      tags: common
  tags: common

- name: check for git-lfs
  shell: git lfs version
  register: check_git_lfs_version
  ignore_errors: yes
  changed_when: no
  when: ansible_distribution == 'CentOS'
  tags: common

- block:
    - name: run git lfs install script
      shell: bash -ilc "curl -s
        https://packagecloud.io/install/repositories/github/git-lfs/script.rpm.sh | bash"
    - name: yum install git-lfs
      shell: yum install -y git-lfs && git lfs install
      args:
        warn: no
  when: ansible_distribution == 'CentOS' and check_git_lfs_version is failed
  tags: common

- name: epel repo
  yum_repository:
    name: epel
    description: EPEL YUM repo
    baseurl: http://download.fedoraproject.org/pub/epel/$releasever/$basearch/
    gpgkey: http://download.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-$releasever
    enabled: no
  when: ansible_distribution == 'CentOS'
  tags: common

- name: Install EPEL repo
  ansible.builtin.yum: name=epel-release state=present
  tags: common

- name: install htop, jq, python-pip etc from epel
  yum:
    name: [ 'htop', 'jq', 'python-pip', 'bash-completion-extras' ]
    enablerepo: epel
    state: present
  when: ansible_distribution == 'CentOS'
  tags: common

- name: Install 'htop' and 'jq' from EPEL, 'bash-completion' from base
  yum:
    name: [ 'htop', 'jq', 'bash-completion' ]
    state: present
  when: ansible_distribution == 'AlmaLinux'
  tags: common

- name: Install snapd from EPEL
  ansible.builtin.yum: name=snapd enablerepo=epel state=present
  register: snapd_install
  tags: common

- name: Enable 'classic snap' support
  ansible.builtin.file:
    src: /var/lib/snapd/snap
    dest: /snap
    state: link
  tags: common

- name: Set snapd service to running and enabled
  service: name=snapd state=started enabled=yes
  tags: common

- name: Update snap after install
  shell: snap install core; snap refresh core
  changed_when: true
  failed_when: false
  when: snapd_install is changed
  tags: common

- name: Configure Python Pip to disable version check
  ansible.builtin.blockinfile:
    path: /etc/pip.conf
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK common"
    block: |
      [global]
      disable-pip-version-check = True
  tags: common

- name: install various old python2 packages on centos
  when: ansible_distribution == 'CentOS'
  block:
    - name: install cryptography
      pip: name=cryptography==2.6.1 state=present
      tags: common

    - name: install pynacl
      pip: name=pynacl==1.2.1 state=present
      tags: common

    - name: install bcrypt
      pip: name=bcrypt==3.1.3 state=present
      tags: common

    - name: install certifi
      pip: name=certifi==2021.10.8 state=present
      tags: common

    - name: install passlib
      pip: name=passlib==1.6.5 state=present
      tags: common

    - name: check for aws cli
      stat: path=/bin/aws
      register: bin_aws_cli
      tags: common

    - name: install awscli (with deps)
      pip: name=awscli~=1.19.0 state=present
      when: not (bin_aws_cli.stat.exists | bool)
      tags: common

    - name: install awscli (no-deps)
      pip: name=awscli~=1.19.0 state=present extra_args=--no-deps
      when: bin_aws_cli.stat.exists | bool
      tags: common

    - name: install passlib
      pip: name=passlib state=present
      tags: common

- name: install centos-release-scl
  yum: name=centos-release-scl state=present
  when: ansible_distribution == 'CentOS'
  tags: common

- name: install python38 from scl
  yum: name=rh-python38 state=present
  when: ansible_distribution == 'CentOS'
  tags: common

- name: Install Python 3.11 from AppStream
  ansible.builtin.yum: name=python3.11-devel state=present
  when: ansible_distribution == 'AlmaLinux'
  tags: common

#- name: install scl pip-20 for rh-python38
#  shell: scl enable rh-python38 "python3 -m pip install pip==20.3.3"
#  register: scl_pip_install
#  changed_when: scl_pip_install.stdout.find('already satisfied') == -1
#  tags: common

- name: install legacy node versions from scl
  when: ansible_distribution == 'CentOS'
  block:
    - name: install rh-nodejs12
      yum:
        name: rh-nodejs12
        state: present
    - name: install rh-nodejs14
      yum:
        name: rh-nodejs14
        state: present
  tags: common

- name: Install Node 10 from AppStream
  ansible.builtin.yum: name=nodejs-devel state=present
  when: ansible_distribution == 'AlmaLinux'
  tags: common

- name: Install OpenJDK 21 from AppStream
  yum: name=java-21-openjdk-devel state=present
  when: ansible_distribution == 'AlmaLinux'
  tags: common

- name: Configure sysadmin accounts
  ansible.builtin.user:
    name: "{{ item.user }}"
    password: "{{ item.passwd }}"
    groups: wheel
    state: present
    force: yes
  with_items: "{{ sysadmins }}"
  tags: common

- name: Set ~/.ssh/authorized_keys for sysadmins
  ansible.posix.authorized_key:
    user: "{{ item.user }}"
    key: "{{ lookup('file', item.user + '_id_rsa.pub') }}"
    exclusive: yes
  with_items: "{{ sysadmins }}"
  tags: common

- name: Update bashrc with better bash history for root and sysadmins
  ansible.builtin.blockinfile:
    dest: "{{ '/root' if item == 'root' else '/home/' + item }}/.bashrc"
    create: yes
    owner: "{{ item }}"
    mode: 0644
    marker: "# {mark} ANSIBLE MANAGED BLOCK common"
    block: |
      HISTFILESIZE=10000000
      HISTSIZE=10000
      HISTCONTROL=ignoreboth
      HISTTIMEFORMAT='%y-%m-%dT%T  '
      shopt -s cmdhist
      shopt -s histappend
      PROMPT_COMMAND='history -a'
  with_items: "{{ ['root'] + (sysadmins | map(attribute='user') | list) }}"
  tags: common

- name: Assert sysadmins are named
  fail: msg="sysadmins must be listed"
  when: not (sysadmins | length)
  tags: common

- name: Allow incoming SSH traffic (firewalld)
  ansible.posix.firewalld: port={{ sshd_port }}/tcp permanent=True state=enabled immediate=yes
  tags: common

- name: Disable password authentication and root login in sshd_config
  ansible.builtin.blockinfile:
    dest: /etc/ssh/sshd_config
    marker: "# {mark} ANSIBLE MANAGED BLOCK common"
    block: |
      Port {{ sshd_port }}
      PermitRootLogin no
      AllowUsers {{ sysadmins | map(attribute='user') | join(' ') }}
      Match Group wheel
      	PasswordAuthentication no
  register: sshd_config
  tags: common

- name: update selinux to allow ssh port {{ sshd_port }}
  shell: semanage port -a -t ssh_port_t -p tcp {{ sshd_port }}
  when: ansible_distribution == 'CentOS' and sshd_config is changed
  ignore_errors: yes
  tags: common

- name: restart sshd to apply config changes
  service: name=sshd state=restarted
  when: sshd_config is changed
  tags: common

- name: Remove ~/.ssh/authorized_keys for 'root' user
  ansible.builtin.file:
    path: /root/.ssh/authorized_keys
    state: absent
  tags: common

- name: install yum-cron on centos
  when: ansible_distribution == 'CentOS'
  block:
    - name: install yum-cron
      yum: name=yum-cron state=present
    - name: template /etc/yum/yum-cron.conf
      template:
        src: yum-cron.conf.j2
        dest: /etc/yum/yum-cron.conf
    - name: yum-cron service running and auto-starting
      service: name=yum-cron state=started enabled=yes
  tags: common

...
